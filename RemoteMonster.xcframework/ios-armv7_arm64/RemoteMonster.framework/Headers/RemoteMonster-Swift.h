#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RemoteMonster",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC13RemoteMonster12FractionLost")
@interface FractionLost : NSObject
@property (nonatomic) NSInteger level;
@property (nonatomic) float max;
@property (nonatomic) float min;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, REMON_AECUNPACK_PRESET, open) {
  REMON_AECUNPACK_PRESETM4A = 0,
  REMON_AECUNPACK_PRESETMP4LOW = 1,
  REMON_AECUNPACK_PRESETMP4MEDIUM = 2,
  REMON_AECUNPACK_PRESETMP4HIGH = 3,
};

typedef SWIFT_ENUM(NSInteger, REMON_AECUNPACK_STATE, open) {
  REMON_AECUNPACK_STATESTART = 0,
  REMON_AECUNPACK_STATEWARNING = 1,
  REMON_AECUNPACK_STATEERROR = 2,
  REMON_AECUNPACK_STATEWROTE = 3,
  REMON_AECUNPACK_STATECOMPLTE = 4,
};




SWIFT_CLASS("_TtC13RemoteMonster11RatingValue")
@interface RatingValue : NSObject
@property (nonatomic) NSInteger level;
@property (nonatomic) float value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RemonAudioMode, open) {
  RemonAudioModeVoice = 0,
  RemonAudioModeMusic = 1,
};

@class RemonConfig;
@class RTCIceServer;
enum SelectiveCandidate : NSInteger;
@class UIView;

/// 통화(RemonCall), 방송(RemonCast) 공통 클래스
IB_DESIGNABLE
SWIFT_CLASS_NAMED("RemonClient")
@interface RemonClient : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) RemonConfig * _Nonnull remonConfig;
@property (nonatomic) double volumeRatio;
@property (nonatomic) BOOL showRemoteVideoStat;
@property (nonatomic) BOOL showLocalVideoStat;
@property (nonatomic, copy) NSString * _Nullable channelID;
/// 갭처러 객체
@property (nonatomic, readonly, strong) RTCVideoCapturer * _Nullable localCapturer;
/// 연결이 완료 된 후 로컬 비디오 캡쳐를 자동으로 시작 할 지 여부
@property (nonatomic) BOOL autoCaptureStart;
/// debug mode.  default is false
@property (nonatomic) BOOL debugMode;
@property (nonatomic, copy) NSString * _Nonnull userMeta;
/// 외부 캡처러 사용 여부 설정
@property (nonatomic) BOOL useExternalCapturer;
/// ICE Server 목록
@property (nonatomic, copy) NSArray<RTCIceServer *> * _Nonnull iceServers;
/// Selective Candidate
@property (nonatomic) enum SelectiveCandidate selectiveCandidate;
/// video codec H264 | VP8. default is H264
@property (nonatomic, copy) IBInspectable NSString * _Nonnull videoCodec;
/// 오디오 전용 여부 선택
@property (nonatomic) IBInspectable BOOL onlyAudio;
/// 비디오 가로 크기
@property (nonatomic) IBInspectable NSInteger videoWidth;
/// 비디오 세로 크기
@property (nonatomic) IBInspectable NSInteger videoHeight;
/// 초당 프레임 수
@property (nonatomic) IBInspectable NSInteger fps;
/// 서비스 아이디
@property (nonatomic, copy) IBInspectable NSString * _Nonnull serviceId;
/// 서비스키
@property (nonatomic, copy) IBInspectable NSString * _Nonnull serviceKey;
/// 서비스 토큰
@property (nonatomic, copy) IBInspectable NSString * _Nonnull serviceToken;
/// rest api 주소
@property (nonatomic, copy) IBInspectable NSString * _Nonnull restUrl;
/// 웹소켓 주소
@property (nonatomic, copy) IBInspectable NSString * _Nonnull wsUrl;
/// log 서버 주소
@property (nonatomic, copy) IBInspectable NSString * _Nonnull logUrl;
/// 전면 카메라 시작
@property (nonatomic) IBInspectable BOOL frontCamera;
/// 카메라 화면 미러모드 동작여부, 화면만 미러로 동작하며, 실제 데이터는 정상 전송
@property (nonatomic) IBInspectable BOOL mirrorMode;
/// 최종 output 프레임 고정여부.
/// true 인 경우 연결시의 방향으로 출력 사이즈가 고정됩니다.
/// false 인 경우 앱이 지원하는 방향으로 회전이 이루어집니다.
/// 단, 앱이 하나의 방향만을 지원하는 경우 회전이 발생하지 않습니다.
@property (nonatomic) IBInspectable BOOL fixedCameraRotation;
@property (nonatomic, weak) IBOutlet UIView * _Nullable remoteView;
@property (nonatomic, weak) IBOutlet UIView * _Nullable localView;
/// 시뮬레이터에서 사용할 동영상 파일명
@property (nonatomic, copy) IBInspectable NSString * _Nullable videoFilePathForSimulator;
@end

@class RemonSearchResult;

/// P2P 영상통화 클래스
SWIFT_CLASS("_TtC13RemoteMonster9RemonCall")
@interface RemonCall : RemonClient
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
- (void)connect:(NSString * _Nonnull)ch :(RemonConfig * _Nullable)config;
///
- (void)fetchCallsWithComplete:(void (^ _Nonnull)(NSArray<RemonSearchResult *> * _Nullable))complete;
@end


@interface RemonCall (SWIFT_EXTENSION(RemoteMonster))
///
- (void)onConnectWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
///
- (void)onFetchWithBlock:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, NSString *> *> * _Nonnull))block;
@end

@protocol RTCVideoCapturerDelegate;

SWIFT_CLASS("_TtC13RemoteMonster19RemonCameraCapturer")
@interface RemonCameraCapturer : RTCCameraVideoCapturer
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDelegate:(id <RTCVideoCapturerDelegate> _Nonnull)delegate SWIFT_UNAVAILABLE;
@end

@class AVCaptureOutput;
@class AVCaptureConnection;

@interface RemonCameraCapturer (SWIFT_EXTENSION(RemoteMonster)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end

@class NSCoder;

SWIFT_CLASS("_TtC13RemoteMonster22RemonCameraPreviewView") SWIFT_DEPRECATED_MSG("use localView")
@interface RemonCameraPreviewView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end


///
SWIFT_CLASS("_TtC13RemoteMonster9RemonCast")
@interface RemonCast : RemonClient
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 시물캐스트 여부 : 방송
@property (nonatomic) IBInspectable BOOL simulcast;
/// 방송에 접속 합니다.
/// - Parameters:
/// - chId: 접속 하려는 방송의 채널 ID
/// - config: 이 인자를 전달 하면 RemonCast의 설정이 무시 되고, config의 설정 값을 따릅니다.
- (void)joinWithChId:(NSString * _Nonnull)chId AndConfig:(RemonConfig * _Nullable)config;
- (void)joinWithChId:(NSString * _Nonnull)chId;
/// 방송을 생성 합니다.
/// - Parameters:
/// - name: 목록에 표시할 이름
/// - channelId: 채널 아이디
/// - config: 이 인자를 전달 하면 RemonCast의 설정이 무시 되고, config의 설정 값을 따릅니다.
- (void)createWithName:(NSString * _Nonnull)name channelId:(NSString * _Nonnull)channelId config:(RemonConfig * _Nullable)config;
/// 방송을 생성합니다.
- (void)create:(RemonConfig * _Nullable)config;
/// 방송 목록을 가져 옵니다.
/// - Parameter complete: 패치 완료 블럭. error 인자가 nil 이라면 RemonSearchResult 목록을 전달 합니다.
- (void)fetchCastsWithComplete:(void (^ _Nonnull)(NSArray<RemonSearchResult *> * _Nullable))complete;
@end


@interface RemonCast (SWIFT_EXTENSION(RemoteMonster))
- (void)onCreateWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
- (void)onJoinWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
- (void)onFetchWithBlock:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, NSString *> *> * _Nonnull))block;
@end

typedef SWIFT_ENUM(NSInteger, RemonChannelType, open) {
  RemonChannelTypeP2p = 0,
  RemonChannelTypeViewer = 1,
  RemonChannelTypeBroadcast = 2,
  RemonChannelTypeRoom = 3,
};



@interface RemonClient (SWIFT_EXTENSION(RemoteMonster))
/// sdk 의 기본 오디오 설정
/// - Parameters
/// + category: AVAudioSession.Category
/// + mode: AVAudioSession.Mode
/// + options: AVAudioSession.CategoryOptions
+ (void)setAudioSessionConfigurationWithCategory:(AVAudioSessionCategory _Nonnull)category mode:(AVAudioSessionMode _Nonnull)mode options:(AVAudioSessionCategoryOptions)options;
@end



enum RemonCloseType : NSInteger;
@class NSError;
@class RemonStatReport;

@interface RemonClient (SWIFT_EXTENSION(RemoteMonster))
/// 초기화 콜백
- (void)onInitWithBlock:(void (^ _Nonnull)(void))block;
/// Peer간 접속 완료 콜백. webrtc 접속이 완료된 이후에 호출
- (void)onCompleteWithBlock:(void (^ _Nonnull)(void))block;
/// 연결 종료 콜백
- (void)onCloseWithBlock:(void (^ _Nonnull)(enum RemonCloseType))block;
- (void)onDisConnectWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
/// 메시지 수신 콜백
- (void)onMessageWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
- (void)onObjcErrorWithBlock:(void (^ _Nonnull)(NSError * _Nonnull))block;
- (void)onStatWithBlock:(void (^ _Nonnull)(RemonStatReport * _Nonnull))block;
/// 원격측 비디오 사이즈 변경시 호출
- (void)onRemoteVideoSizeChangedWithBlock:(void (^ _Nonnull)(UIView * _Nullable, CGSize))block;
/// 로컬 비디오 사이즈 변경시 호출
- (void)onLocalVideoSizeChangedWithBlock:(void (^ _Nonnull)(UIView * _Nullable, CGSize))block;
- (void)onRoomEventWithBlock:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))block;
- (void)onRemonStatReportWithBlock:(void (^ _Nonnull)(RemonStatReport * _Nonnull))block SWIFT_DEPRECATED_MSG("use onStat");
@end

enum objc_RemonBandwidth : NSInteger;

@interface RemonClient (SWIFT_EXTENSION(RemoteMonster))
- (void)setConfigWithConfig:(RemonConfig * _Nonnull)config;
///
- (NSInteger)getCurrentRemonState SWIFT_WARN_UNUSED_RESULT;
/// 현재 상태를 문자열로 얻어옵니다.
- (NSString * _Nonnull)getCurruntStateString SWIFT_WARN_UNUSED_RESULT;
/// webrtc 연결 종료
- (void)closeRemon;
- (void)switchSimulcastLayerWithBandwidth:(enum objc_RemonBandwidth)bandwidth;
/// 원격지 사운드 켜거나 끄기
- (void)setRemoteAudioEnabledWithIsEnabled:(BOOL)isEnabled;
/// 로컬 사운드 켜거나 끄기
- (void)setLocalAudioEnabledWithIsEnabled:(BOOL)isEnabled;
/// 로컬 비디오 켜거나 끄기
- (void)setLocalVideoEnabledWithIsEnabled:(BOOL)isEnabled;
/// 원격지 비디오 켜거나 끄기
- (void)setRemoteVideoEnabledWithIsEnabled:(BOOL)isEnabled;
/// 로컬 비디오(카메라) 시작
/// 로컬 비디오를 사용하는 모든 연결에 영향이 있으므로, 특정 연결된 세션의 비디오를 켜거나 끄는 경우
/// setLocalVideoEnabled( isEnabled: true ) 메쏘드 사용.
- (BOOL)startLocalVideoCaptureWithCompletion:(void (^ _Nonnull)(void))completion SWIFT_WARN_UNUSED_RESULT;
/// 로컬 비디오(카메라) 중지
- (BOOL)stopLocalVideoCapture SWIFT_WARN_UNUSED_RESULT;
/// 채널이 연결된 상태에서 상대편에게 메시지를 전달한다.
- (void)sendMessageWithMessage:(NSString * _Nonnull)message;
/// 카메라 전환
/// 현재 카메라의 미러모드를 전환하거나, 전후면 카메라를 전환한다
/// -Parameters:
/// +isMirror: 미러모드 적용 여부
/// +isToggle: 카메라 전면,후면 전환 여부
/// -Return:변경된 카메라가 전면이면 true, 후면이면 false
- (BOOL)switchCameraWithIsMirror:(BOOL)isMirror isToggle:(BOOL)isToggle SWIFT_WARN_UNUSED_RESULT;
/// 볼륨설정
- (void)setVolumeWithVolume:(float)volume;
- (void)startDumpWithFileName:(NSString * _Nonnull)withFileName maxSizeInBytes:(int64_t)maxSizeInBytes;
- (void)stopDump;
+ (void)unpackAecDumpWithDumpName:(NSString * _Nullable)dumpName resultFileName:(NSString * _Nonnull)resultFileName avPreset:(enum REMON_AECUNPACK_PRESET)avPreset progress:(void (^ _Nonnull)(NSError * _Nullable, enum REMON_AECUNPACK_STATE))progress;
+ (void)unpackAecDumpWithDumpName:(NSString * _Nullable)dumpName resultFileName:(NSString * _Nonnull)resultFileName progress:(void (^ _Nonnull)(NSError * _Nullable, enum REMON_AECUNPACK_STATE))progress;
- (void)showLocalVideo;
- (void)muteRemoteAudioWithMute:(BOOL)mute SWIFT_DEPRECATED_MSG("Use setRemoteAudioEnabled( isEnabled: Bool )");
- (void)muteLocalAudioWithMute:(BOOL)mute SWIFT_DEPRECATED_MSG("Use setLocalAudioEnabled( isEnabled: Bool )");
- (void)startRemoteVideoCapture SWIFT_DEPRECATED_MSG("Use setRemoteVideoEnabled( isEnabled: true)");
- (void)stopRemoteVideoCapture SWIFT_DEPRECATED_MSG("Use setRemoteVideoEnabled( isEnabled: false)");
- (void)switchBandWidthWithBandwidth:(enum objc_RemonBandwidth)bandwidth;
@end

typedef SWIFT_ENUM(NSInteger, RemonCloseType, open) {
  RemonCloseTypeMINE = 0,
  RemonCloseTypeOTHER = 1,
  RemonCloseTypeUNKNOWN = 2,
  RemonCloseTypeOTHER_UNEXPECTED = 3,
};


///
SWIFT_CLASS("_TtC13RemoteMonster15RemonConference")
@interface RemonConference : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Remon을 실행하기 전에 여러가지 통신/방송 상태를 미리 설정할 필요가 있음. 필수적으로
/// key와 serviceId가 있으며 그 외에도 음성만 사용하고자 할 경우 videoCall = false로 해야하며
/// 비디오 코덱등도 수정이 가능하다.
SWIFT_CLASS("_TtC13RemoteMonster11RemonConfig")
@interface RemonConfig : NSObject
/// 인증을 위한 rest 서버 url
@property (nonatomic, copy) NSString * _Nonnull restUrl;
/// 시그널링 서버 url
@property (nonatomic, copy) NSString * _Nonnull wsUrl;
/// 로그 서버 url
@property (nonatomic, copy) NSString * _Nonnull logUrl;
/// ICE 서버 목록
@property (nonatomic, copy) NSArray<RTCIceServer *> * _Nonnull iceServers;
/// selective candidate
@property (nonatomic) enum SelectiveCandidate selectiveCandidate;
/// RemoteMonster서버로부터 발급받은 인증 키
@property (nonatomic, copy) NSString * _Nonnull key;
/// RemoteMonster API를 사용하기 위해 필요한 서비스 id. Remotemonster 홈페이지에서 요청하여 받는다.
@property (nonatomic, copy) NSString * _Nonnull serviceId;
/// RemoteMonster API를 사용하기 위한 토큰
@property (nonatomic, copy) NSString * _Nonnull serviceToken;
/// Remon객체를 생성하면 서버와 인증 후 받게 되는 일회성 용도의 token.
@property (nonatomic, copy) NSString * _Nonnull token;
/// 음성만 사용할 경우 false, 영상도 사용할 경우 true
@property (nonatomic) BOOL videoCall;
/// 초기 비트레이트
@property (nonatomic, copy) NSString * _Nonnull videoStartBitrate;
@property (nonatomic, copy) NSString * _Nonnull startVideoBitrate SWIFT_DEPRECATED_MSG("renamed to videoStartBitrate instead");
/// 송출할 비디오의 영상 코덱. 기본은 H264이며 VP9, VP8등을 사용할 수 있다.
@property (nonatomic, copy) NSString * _Nonnull videoCodec;
/// 송출할 비디오의 가로길이. 기본값은 640. 네트워크 상태에 따라 변경됨.
@property (nonatomic) NSInteger videoWidth;
/// 송출할 비디오의 세로길이. 기본값은 480. 네트워크 상태에 따라 변경됨.
@property (nonatomic) NSInteger videoHeight;
/// 송출할 비디오의 frames per second. 기본값은 30. 네트워크 상태에 따라 변경됨.
@property (nonatomic) NSInteger videoFps;
@property (nonatomic) BOOL autoCaptureStart;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic) BOOL debugMode;
/// 시작시 전면 카메라 사용여부
@property (nonatomic) BOOL frontCamera;
/// 전면카메라 미러모드 설정.
@property (nonatomic) BOOL mirrorMode;
/// 송출 방향 고정 여부. 단말의 orientation에 영향을 받지 않고 단일 방향으로 고정할 때 사용.
@property (nonatomic) BOOL fixedCameraRotation;
/// 외부 캡처러 사용. 내부 카메라 모듈을 사용하지 않고, 외부에서 별도로 구성하는 경우 사용.
@property (nonatomic) BOOL useExternalCapturer;
/// 추가 메타 정보
@property (nonatomic, copy) NSString * _Nonnull userMeta;
@property (nonatomic) RTCLoggingSeverity debugLevel;
/// 시뮬레이터에서 로컬 재생을 위한 동영상 파일명
@property (nonatomic, copy) NSString * _Nullable videoFilePathForSimulator;
/// 시뮬캐스트 동작을 위한 플래그(방송)
@property (nonatomic) BOOL simulcast;
@property (nonatomic) NSInteger iceDisconnectedTimeout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SelectiveCandidate, open) {
  SelectiveCandidateDefault = 0,
  SelectiveCandidateRelay = 1,
  SelectiveCandidateRoute = 2,
  SelectiveCandidateAuto = 3,
};


SWIFT_CLASS("_TtC13RemoteMonster16RemonParticipant")
@interface RemonParticipant : RemonClient
/// 목록을 가져 옵니다.
/// \param complete 패치 완료 블럭. error 인자가 nil 이라면 RemonSearchResult 목록을 전달 합니다.
///
- (void)fetchChannelsInRoomWithRoomName:(NSString * _Nonnull)roomName complete:(void (^ _Nonnull)(NSArray<RemonSearchResult *> * _Nullable))complete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ParticipantType, open) {
  ParticipantTypePUBLISH = 0,
  ParticipantTypeSUBSCRIBE = 1,
};


SWIFT_CLASS("_TtC13RemoteMonster19RemonSampleCapturer")
@interface RemonSampleCapturer : RTCVideoCapturer
- (nonnull instancetype)initWithDelegate:(id <RTCVideoCapturerDelegate> _Nonnull)delegate SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13RemoteMonster17RemonSearchResult")
@interface RemonSearchResult : NSObject
@property (nonatomic, copy) NSString * _Nonnull chId;
@property (nonatomic, copy) NSString * _Nonnull serviceId;
@property (nonatomic, copy) NSString * _Nonnull status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13RemoteMonster15RemonStatReport")
@interface RemonStatReport : NSObject
@property (nonatomic, copy) NSString * _Nonnull localCandidate;
@property (nonatomic, copy) NSString * _Nonnull remoteCandidate;
@property (nonatomic) NSInteger localFrameWidth;
@property (nonatomic) NSInteger localFrameHeight;
@property (nonatomic) NSInteger remoteFrameWidth;
@property (nonatomic) NSInteger remoteFrameHeight;
@property (nonatomic) NSInteger localFrameRate;
@property (nonatomic) NSInteger remoteFrameRate;
@property (nonatomic) NSInteger availableSendBandwidth;
@property (nonatomic) NSInteger availableReceiveBandwidth;
@property (nonatomic) float rtt;
@property (nonatomic) float localAudioFractionLost;
@property (nonatomic) float localVideoFractionLost;
@property (nonatomic) float remoteAudioFractionLost;
@property (nonatomic) float remoteVideoFractionLost;
@property (nonatomic) float bytesReceived;
@property (nonatomic, copy) NSString * _Nonnull fullStatReport;
- (RatingValue * _Nonnull)getHealthRating SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getFpsRating SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getRemoteAudioFractionLost SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getLocalAudioFractionLost SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getRemoteVideoFractionLost SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getLoaclVideoFractionLost SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getRttRating SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Remon의 상태
/// INIT: Remon을 생성하여 서버와 연결되기까지 과정을 의미
typedef SWIFT_ENUM(NSInteger, RemonState, open) {
///
  RemonStateREADY = 0,
/// 객체를 생성하여 서버와 웹소켓으로 연결되는 과정의 상태를 의미
  RemonStateINIT = 1,
/// 채널 생성및 접속이 완료된 상황. 통화인 경우 상대편 기다리는 상태
  RemonStateCREATE = 2,
/// 상대편 채널에 접속중일 때의 상태
  RemonStateCONNECT = 3,
/// 방송 생성 후 상태
  RemonStateCOMPLETE = 4,
/// 통신 연결 후 빠져나갔을 때의 상태
  RemonStateCLOSE = 5,
};


SWIFT_CLASS("_TtC13RemoteMonster10StatResult")
@interface StatResult : NSObject
@property (nonatomic) NSInteger availableReceiveBandwidth;
@property (nonatomic) NSInteger availableSendBandwidth;
@property (nonatomic) NSInteger fractionRating;
@property (nonatomic) NSInteger localAudioFractionLost;
@property (nonatomic) NSInteger localAudioFractionRating;
@property (nonatomic, copy) NSString * _Nonnull localCandidate;
@property (nonatomic) NSInteger localFrameHeight;
@property (nonatomic) NSInteger localFrameRate;
@property (nonatomic) NSInteger localFrameWidth;
@property (nonatomic) NSInteger localVideoFractionLost;
@property (nonatomic) NSInteger localVideoFractionRating;
@property (nonatomic) NSInteger remoteAudioFractionLost;
@property (nonatomic) NSInteger remoteAudioFractionRating;
@property (nonatomic, copy) NSString * _Nonnull remoteCandidate;
@property (nonatomic) NSInteger remoteFrameHeight;
@property (nonatomic) NSInteger remoteFrameRate;
@property (nonatomic) NSInteger remoteFrameWidth;
@property (nonatomic) NSInteger remoteVideoFractionLost;
@property (nonatomic) NSInteger remoteVideoFractionRating;
@property (nonatomic) NSInteger rtt;
@property (nonatomic) NSInteger rttRating;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WebSocketReadyState : NSInteger;

/// WebSocket objects are bidirectional network streams that communicate over HTTP. RFC 6455.
SWIFT_CLASS("_TtC13RemoteMonster9WebSocket")
@interface WebSocket : NSObject
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)init:(NSString * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Create a WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols OBJC_DESIGNATED_INITIALIZER;
/// Create a WebSocket object with a deferred connection; the connection is not opened until the .open() method is called.
- (nonnull instancetype)init;
/// The URL as resolved by the constructor. This is always an absolute URL. Read only.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// A string indicating the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object.
@property (nonatomic, readonly, copy) NSString * _Nonnull subProtocol;
/// Allow for Self-Signed SSL Certificates. Default is false.
@property (nonatomic) BOOL allowSelfSignedSSL;
/// The queue for firing off events. default is main_queue
@property (nonatomic, strong) dispatch_queue_t _Nullable eventQueue;
/// The current state of the connection; this is one of the WebSocketReadyState constants. Read only.
@property (nonatomic, readonly) enum WebSocketReadyState readyState;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)open:(NSString * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)openWithNsurl:(NSURL * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (void)open:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (void)open:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Opens a deferred or closed WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (void)openWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a closed WebSocket connection from an NSURLRequest; Uses the same request and protocols as previously closed WebSocket
- (void)open;
/// Closes the WebSocket connection or connection attempt, if any. If the connection is already closed or in the state of closing, this method does nothing.
/// :param: code An integer indicating the status code explaining why the connection is being closed. If this parameter is not specified, a default value of 1000 (indicating a normal closure) is assumed.
/// :param: reason A human-readable string explaining why the connection is closing. This string must be no longer than 123 bytes of UTF-8 text (not characters).
- (void)close:(NSInteger)code reason:(NSString * _Nonnull)reason;
/// Transmits message to the server over the WebSocket connection.
/// :param: message The message to be sent to the server.
- (void)send:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
/// :param: optional message The data to be sent to the server.
- (void)ping:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
- (void)ping;
@end

@protocol WebSocketDelegate;

@interface WebSocket (SWIFT_EXTENSION(RemoteMonster))
/// The events of the WebSocket using a delegate.
@property (nonatomic, strong) id <WebSocketDelegate> _Nullable delegate;
/// Transmits message to the server over the WebSocket connection.
/// :param: text The message (string) to be sent to the server.
- (void)sendWithText:(NSString * _Nonnull)text;
/// Transmits message to the server over the WebSocket connection.
/// :param: data The message (binary) to be sent to the server.
- (void)sendWithData:(NSData * _Nonnull)data;
@end


/// WebSocketDelegate is an Objective-C alternative to WebSocketEvents and is used to delegate the events for the WebSocket connection.
SWIFT_PROTOCOL("_TtP13RemoteMonster17WebSocketDelegate_")
@protocol WebSocketDelegate
/// A function to be called when the WebSocket connection’s readyState changes to .Open; this indicates that the connection is ready to send and receive data.
- (void)webSocketOpen;
/// A function to be called when the WebSocket connection’s readyState changes to .Closed.
- (void)webSocketClose:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean;
/// A function to be called when an error occurs.
- (void)webSocketError:(NSError * _Nonnull)error;
@optional
/// A function to be called when a message (string) is received from the server.
- (void)webSocketMessageText:(NSString * _Nonnull)text;
/// A function to be called when a message (binary) is received from the server.
- (void)webSocketMessageData:(NSData * _Nonnull)data;
/// A function to be called when a pong is received from the server.
- (void)webSocketPong;
/// A function to be called when the WebSocket process has ended; this event is guarenteed to be called once and can be used as an alternative to the “close” or “error” events.
- (void)webSocketEnd:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean error:(NSError * _Nullable)error;
@end

/// The WebSocketReadyState enum is used by the readyState property to describe the status of the WebSocket connection.
typedef SWIFT_ENUM(NSInteger, WebSocketReadyState, open) {
/// The connection is not yet open.
  WebSocketReadyStateConnecting = 0,
/// The connection is open and ready to communicate.
  WebSocketReadyStateOpen = 1,
/// The connection is in the process of closing.
  WebSocketReadyStateClosing = 2,
/// The connection is closed or couldn’t be opened.
  WebSocketReadyStateClosed = 3,
};


SWIFT_CLASS("_TtC13RemoteMonster9aecunpack")
@interface aecunpack : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, objc_RemonBandwidth, open) {
  objc_RemonBandwidthHIGH = 0,
  objc_RemonBandwidthMEDIUM = 1,
  objc_RemonBandwidthLOW = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="RemoteMonster",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC13RemoteMonster12FractionLost")
@interface FractionLost : NSObject
@property (nonatomic) NSInteger level;
@property (nonatomic) float max;
@property (nonatomic) float min;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, REMON_AECUNPACK_PRESET, open) {
  REMON_AECUNPACK_PRESETM4A = 0,
  REMON_AECUNPACK_PRESETMP4LOW = 1,
  REMON_AECUNPACK_PRESETMP4MEDIUM = 2,
  REMON_AECUNPACK_PRESETMP4HIGH = 3,
};

typedef SWIFT_ENUM(NSInteger, REMON_AECUNPACK_STATE, open) {
  REMON_AECUNPACK_STATESTART = 0,
  REMON_AECUNPACK_STATEWARNING = 1,
  REMON_AECUNPACK_STATEERROR = 2,
  REMON_AECUNPACK_STATEWROTE = 3,
  REMON_AECUNPACK_STATECOMPLTE = 4,
};




SWIFT_CLASS("_TtC13RemoteMonster11RatingValue")
@interface RatingValue : NSObject
@property (nonatomic) NSInteger level;
@property (nonatomic) float value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RemonAudioMode, open) {
  RemonAudioModeVoice = 0,
  RemonAudioModeMusic = 1,
};

@class RemonConfig;
@class RTCIceServer;
enum SelectiveCandidate : NSInteger;
@class UIView;

/// 통화(RemonCall), 방송(RemonCast) 공통 클래스
IB_DESIGNABLE
SWIFT_CLASS_NAMED("RemonClient")
@interface RemonClient : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) RemonConfig * _Nonnull remonConfig;
@property (nonatomic) double volumeRatio;
@property (nonatomic) BOOL showRemoteVideoStat;
@property (nonatomic) BOOL showLocalVideoStat;
@property (nonatomic, copy) NSString * _Nullable channelID;
/// 갭처러 객체
@property (nonatomic, readonly, strong) RTCVideoCapturer * _Nullable localCapturer;
/// 연결이 완료 된 후 로컬 비디오 캡쳐를 자동으로 시작 할 지 여부
@property (nonatomic) BOOL autoCaptureStart;
/// debug mode.  default is false
@property (nonatomic) BOOL debugMode;
@property (nonatomic, copy) NSString * _Nonnull userMeta;
/// 외부 캡처러 사용 여부 설정
@property (nonatomic) BOOL useExternalCapturer;
/// ICE Server 목록
@property (nonatomic, copy) NSArray<RTCIceServer *> * _Nonnull iceServers;
/// Selective Candidate
@property (nonatomic) enum SelectiveCandidate selectiveCandidate;
/// video codec H264 | VP8. default is H264
@property (nonatomic, copy) IBInspectable NSString * _Nonnull videoCodec;
/// 오디오 전용 여부 선택
@property (nonatomic) IBInspectable BOOL onlyAudio;
/// 비디오 가로 크기
@property (nonatomic) IBInspectable NSInteger videoWidth;
/// 비디오 세로 크기
@property (nonatomic) IBInspectable NSInteger videoHeight;
/// 초당 프레임 수
@property (nonatomic) IBInspectable NSInteger fps;
/// 서비스 아이디
@property (nonatomic, copy) IBInspectable NSString * _Nonnull serviceId;
/// 서비스키
@property (nonatomic, copy) IBInspectable NSString * _Nonnull serviceKey;
/// 서비스 토큰
@property (nonatomic, copy) IBInspectable NSString * _Nonnull serviceToken;
/// rest api 주소
@property (nonatomic, copy) IBInspectable NSString * _Nonnull restUrl;
/// 웹소켓 주소
@property (nonatomic, copy) IBInspectable NSString * _Nonnull wsUrl;
/// log 서버 주소
@property (nonatomic, copy) IBInspectable NSString * _Nonnull logUrl;
/// 전면 카메라 시작
@property (nonatomic) IBInspectable BOOL frontCamera;
/// 카메라 화면 미러모드 동작여부, 화면만 미러로 동작하며, 실제 데이터는 정상 전송
@property (nonatomic) IBInspectable BOOL mirrorMode;
/// 최종 output 프레임 고정여부.
/// true 인 경우 연결시의 방향으로 출력 사이즈가 고정됩니다.
/// false 인 경우 앱이 지원하는 방향으로 회전이 이루어집니다.
/// 단, 앱이 하나의 방향만을 지원하는 경우 회전이 발생하지 않습니다.
@property (nonatomic) IBInspectable BOOL fixedCameraRotation;
@property (nonatomic, weak) IBOutlet UIView * _Nullable remoteView;
@property (nonatomic, weak) IBOutlet UIView * _Nullable localView;
/// 시뮬레이터에서 사용할 동영상 파일명
@property (nonatomic, copy) IBInspectable NSString * _Nullable videoFilePathForSimulator;
@end

@class RemonSearchResult;

/// P2P 영상통화 클래스
SWIFT_CLASS("_TtC13RemoteMonster9RemonCall")
@interface RemonCall : RemonClient
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
///
- (void)connect:(NSString * _Nonnull)ch :(RemonConfig * _Nullable)config;
///
- (void)fetchCallsWithComplete:(void (^ _Nonnull)(NSArray<RemonSearchResult *> * _Nullable))complete;
@end


@interface RemonCall (SWIFT_EXTENSION(RemoteMonster))
///
- (void)onConnectWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
///
- (void)onFetchWithBlock:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, NSString *> *> * _Nonnull))block;
@end

@protocol RTCVideoCapturerDelegate;

SWIFT_CLASS("_TtC13RemoteMonster19RemonCameraCapturer")
@interface RemonCameraCapturer : RTCCameraVideoCapturer
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDelegate:(id <RTCVideoCapturerDelegate> _Nonnull)delegate SWIFT_UNAVAILABLE;
@end

@class AVCaptureOutput;
@class AVCaptureConnection;

@interface RemonCameraCapturer (SWIFT_EXTENSION(RemoteMonster)) <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end

@class NSCoder;

SWIFT_CLASS("_TtC13RemoteMonster22RemonCameraPreviewView") SWIFT_DEPRECATED_MSG("use localView")
@interface RemonCameraPreviewView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end


///
SWIFT_CLASS("_TtC13RemoteMonster9RemonCast")
@interface RemonCast : RemonClient
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 시물캐스트 여부 : 방송
@property (nonatomic) IBInspectable BOOL simulcast;
/// 방송에 접속 합니다.
/// - Parameters:
/// - chId: 접속 하려는 방송의 채널 ID
/// - config: 이 인자를 전달 하면 RemonCast의 설정이 무시 되고, config의 설정 값을 따릅니다.
- (void)joinWithChId:(NSString * _Nonnull)chId AndConfig:(RemonConfig * _Nullable)config;
- (void)joinWithChId:(NSString * _Nonnull)chId;
/// 방송을 생성 합니다.
/// - Parameters:
/// - name: 목록에 표시할 이름
/// - channelId: 채널 아이디
/// - config: 이 인자를 전달 하면 RemonCast의 설정이 무시 되고, config의 설정 값을 따릅니다.
- (void)createWithName:(NSString * _Nonnull)name channelId:(NSString * _Nonnull)channelId config:(RemonConfig * _Nullable)config;
/// 방송을 생성합니다.
- (void)create:(RemonConfig * _Nullable)config;
/// 방송 목록을 가져 옵니다.
/// - Parameter complete: 패치 완료 블럭. error 인자가 nil 이라면 RemonSearchResult 목록을 전달 합니다.
- (void)fetchCastsWithComplete:(void (^ _Nonnull)(NSArray<RemonSearchResult *> * _Nullable))complete;
@end


@interface RemonCast (SWIFT_EXTENSION(RemoteMonster))
- (void)onCreateWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
- (void)onJoinWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
- (void)onFetchWithBlock:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, NSString *> *> * _Nonnull))block;
@end

typedef SWIFT_ENUM(NSInteger, RemonChannelType, open) {
  RemonChannelTypeP2p = 0,
  RemonChannelTypeViewer = 1,
  RemonChannelTypeBroadcast = 2,
  RemonChannelTypeRoom = 3,
};



@interface RemonClient (SWIFT_EXTENSION(RemoteMonster))
/// sdk 의 기본 오디오 설정
/// - Parameters
/// + category: AVAudioSession.Category
/// + mode: AVAudioSession.Mode
/// + options: AVAudioSession.CategoryOptions
+ (void)setAudioSessionConfigurationWithCategory:(AVAudioSessionCategory _Nonnull)category mode:(AVAudioSessionMode _Nonnull)mode options:(AVAudioSessionCategoryOptions)options;
@end



enum RemonCloseType : NSInteger;
@class NSError;
@class RemonStatReport;

@interface RemonClient (SWIFT_EXTENSION(RemoteMonster))
/// 초기화 콜백
- (void)onInitWithBlock:(void (^ _Nonnull)(void))block;
/// Peer간 접속 완료 콜백. webrtc 접속이 완료된 이후에 호출
- (void)onCompleteWithBlock:(void (^ _Nonnull)(void))block;
/// 연결 종료 콜백
- (void)onCloseWithBlock:(void (^ _Nonnull)(enum RemonCloseType))block;
- (void)onDisConnectWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
/// 메시지 수신 콜백
- (void)onMessageWithBlock:(void (^ _Nonnull)(NSString * _Nullable))block;
- (void)onObjcErrorWithBlock:(void (^ _Nonnull)(NSError * _Nonnull))block;
- (void)onStatWithBlock:(void (^ _Nonnull)(RemonStatReport * _Nonnull))block;
/// 원격측 비디오 사이즈 변경시 호출
- (void)onRemoteVideoSizeChangedWithBlock:(void (^ _Nonnull)(UIView * _Nullable, CGSize))block;
/// 로컬 비디오 사이즈 변경시 호출
- (void)onLocalVideoSizeChangedWithBlock:(void (^ _Nonnull)(UIView * _Nullable, CGSize))block;
- (void)onRoomEventWithBlock:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))block;
- (void)onRemonStatReportWithBlock:(void (^ _Nonnull)(RemonStatReport * _Nonnull))block SWIFT_DEPRECATED_MSG("use onStat");
@end

enum objc_RemonBandwidth : NSInteger;

@interface RemonClient (SWIFT_EXTENSION(RemoteMonster))
- (void)setConfigWithConfig:(RemonConfig * _Nonnull)config;
///
- (NSInteger)getCurrentRemonState SWIFT_WARN_UNUSED_RESULT;
/// 현재 상태를 문자열로 얻어옵니다.
- (NSString * _Nonnull)getCurruntStateString SWIFT_WARN_UNUSED_RESULT;
/// webrtc 연결 종료
- (void)closeRemon;
- (void)switchSimulcastLayerWithBandwidth:(enum objc_RemonBandwidth)bandwidth;
/// 원격지 사운드 켜거나 끄기
- (void)setRemoteAudioEnabledWithIsEnabled:(BOOL)isEnabled;
/// 로컬 사운드 켜거나 끄기
- (void)setLocalAudioEnabledWithIsEnabled:(BOOL)isEnabled;
/// 로컬 비디오 켜거나 끄기
- (void)setLocalVideoEnabledWithIsEnabled:(BOOL)isEnabled;
/// 원격지 비디오 켜거나 끄기
- (void)setRemoteVideoEnabledWithIsEnabled:(BOOL)isEnabled;
/// 로컬 비디오(카메라) 시작
/// 로컬 비디오를 사용하는 모든 연결에 영향이 있으므로, 특정 연결된 세션의 비디오를 켜거나 끄는 경우
/// setLocalVideoEnabled( isEnabled: true ) 메쏘드 사용.
- (BOOL)startLocalVideoCaptureWithCompletion:(void (^ _Nonnull)(void))completion SWIFT_WARN_UNUSED_RESULT;
/// 로컬 비디오(카메라) 중지
- (BOOL)stopLocalVideoCapture SWIFT_WARN_UNUSED_RESULT;
/// 채널이 연결된 상태에서 상대편에게 메시지를 전달한다.
- (void)sendMessageWithMessage:(NSString * _Nonnull)message;
/// 카메라 전환
/// 현재 카메라의 미러모드를 전환하거나, 전후면 카메라를 전환한다
/// -Parameters:
/// +isMirror: 미러모드 적용 여부
/// +isToggle: 카메라 전면,후면 전환 여부
/// -Return:변경된 카메라가 전면이면 true, 후면이면 false
- (BOOL)switchCameraWithIsMirror:(BOOL)isMirror isToggle:(BOOL)isToggle SWIFT_WARN_UNUSED_RESULT;
/// 볼륨설정
- (void)setVolumeWithVolume:(float)volume;
- (void)startDumpWithFileName:(NSString * _Nonnull)withFileName maxSizeInBytes:(int64_t)maxSizeInBytes;
- (void)stopDump;
+ (void)unpackAecDumpWithDumpName:(NSString * _Nullable)dumpName resultFileName:(NSString * _Nonnull)resultFileName avPreset:(enum REMON_AECUNPACK_PRESET)avPreset progress:(void (^ _Nonnull)(NSError * _Nullable, enum REMON_AECUNPACK_STATE))progress;
+ (void)unpackAecDumpWithDumpName:(NSString * _Nullable)dumpName resultFileName:(NSString * _Nonnull)resultFileName progress:(void (^ _Nonnull)(NSError * _Nullable, enum REMON_AECUNPACK_STATE))progress;
- (void)showLocalVideo;
- (void)muteRemoteAudioWithMute:(BOOL)mute SWIFT_DEPRECATED_MSG("Use setRemoteAudioEnabled( isEnabled: Bool )");
- (void)muteLocalAudioWithMute:(BOOL)mute SWIFT_DEPRECATED_MSG("Use setLocalAudioEnabled( isEnabled: Bool )");
- (void)startRemoteVideoCapture SWIFT_DEPRECATED_MSG("Use setRemoteVideoEnabled( isEnabled: true)");
- (void)stopRemoteVideoCapture SWIFT_DEPRECATED_MSG("Use setRemoteVideoEnabled( isEnabled: false)");
- (void)switchBandWidthWithBandwidth:(enum objc_RemonBandwidth)bandwidth;
@end

typedef SWIFT_ENUM(NSInteger, RemonCloseType, open) {
  RemonCloseTypeMINE = 0,
  RemonCloseTypeOTHER = 1,
  RemonCloseTypeUNKNOWN = 2,
  RemonCloseTypeOTHER_UNEXPECTED = 3,
};


///
SWIFT_CLASS("_TtC13RemoteMonster15RemonConference")
@interface RemonConference : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Remon을 실행하기 전에 여러가지 통신/방송 상태를 미리 설정할 필요가 있음. 필수적으로
/// key와 serviceId가 있으며 그 외에도 음성만 사용하고자 할 경우 videoCall = false로 해야하며
/// 비디오 코덱등도 수정이 가능하다.
SWIFT_CLASS("_TtC13RemoteMonster11RemonConfig")
@interface RemonConfig : NSObject
/// 인증을 위한 rest 서버 url
@property (nonatomic, copy) NSString * _Nonnull restUrl;
/// 시그널링 서버 url
@property (nonatomic, copy) NSString * _Nonnull wsUrl;
/// 로그 서버 url
@property (nonatomic, copy) NSString * _Nonnull logUrl;
/// ICE 서버 목록
@property (nonatomic, copy) NSArray<RTCIceServer *> * _Nonnull iceServers;
/// selective candidate
@property (nonatomic) enum SelectiveCandidate selectiveCandidate;
/// RemoteMonster서버로부터 발급받은 인증 키
@property (nonatomic, copy) NSString * _Nonnull key;
/// RemoteMonster API를 사용하기 위해 필요한 서비스 id. Remotemonster 홈페이지에서 요청하여 받는다.
@property (nonatomic, copy) NSString * _Nonnull serviceId;
/// RemoteMonster API를 사용하기 위한 토큰
@property (nonatomic, copy) NSString * _Nonnull serviceToken;
/// Remon객체를 생성하면 서버와 인증 후 받게 되는 일회성 용도의 token.
@property (nonatomic, copy) NSString * _Nonnull token;
/// 음성만 사용할 경우 false, 영상도 사용할 경우 true
@property (nonatomic) BOOL videoCall;
/// 초기 비트레이트
@property (nonatomic, copy) NSString * _Nonnull videoStartBitrate;
@property (nonatomic, copy) NSString * _Nonnull startVideoBitrate SWIFT_DEPRECATED_MSG("renamed to videoStartBitrate instead");
/// 송출할 비디오의 영상 코덱. 기본은 H264이며 VP9, VP8등을 사용할 수 있다.
@property (nonatomic, copy) NSString * _Nonnull videoCodec;
/// 송출할 비디오의 가로길이. 기본값은 640. 네트워크 상태에 따라 변경됨.
@property (nonatomic) NSInteger videoWidth;
/// 송출할 비디오의 세로길이. 기본값은 480. 네트워크 상태에 따라 변경됨.
@property (nonatomic) NSInteger videoHeight;
/// 송출할 비디오의 frames per second. 기본값은 30. 네트워크 상태에 따라 변경됨.
@property (nonatomic) NSInteger videoFps;
@property (nonatomic) BOOL autoCaptureStart;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic) BOOL debugMode;
/// 시작시 전면 카메라 사용여부
@property (nonatomic) BOOL frontCamera;
/// 전면카메라 미러모드 설정.
@property (nonatomic) BOOL mirrorMode;
/// 송출 방향 고정 여부. 단말의 orientation에 영향을 받지 않고 단일 방향으로 고정할 때 사용.
@property (nonatomic) BOOL fixedCameraRotation;
/// 외부 캡처러 사용. 내부 카메라 모듈을 사용하지 않고, 외부에서 별도로 구성하는 경우 사용.
@property (nonatomic) BOOL useExternalCapturer;
/// 추가 메타 정보
@property (nonatomic, copy) NSString * _Nonnull userMeta;
@property (nonatomic) RTCLoggingSeverity debugLevel;
/// 시뮬레이터에서 로컬 재생을 위한 동영상 파일명
@property (nonatomic, copy) NSString * _Nullable videoFilePathForSimulator;
/// 시뮬캐스트 동작을 위한 플래그(방송)
@property (nonatomic) BOOL simulcast;
@property (nonatomic) NSInteger iceDisconnectedTimeout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SelectiveCandidate, open) {
  SelectiveCandidateDefault = 0,
  SelectiveCandidateRelay = 1,
  SelectiveCandidateRoute = 2,
  SelectiveCandidateAuto = 3,
};


SWIFT_CLASS("_TtC13RemoteMonster16RemonParticipant")
@interface RemonParticipant : RemonClient
/// 목록을 가져 옵니다.
/// \param complete 패치 완료 블럭. error 인자가 nil 이라면 RemonSearchResult 목록을 전달 합니다.
///
- (void)fetchChannelsInRoomWithRoomName:(NSString * _Nonnull)roomName complete:(void (^ _Nonnull)(NSArray<RemonSearchResult *> * _Nullable))complete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ParticipantType, open) {
  ParticipantTypePUBLISH = 0,
  ParticipantTypeSUBSCRIBE = 1,
};


SWIFT_CLASS("_TtC13RemoteMonster19RemonSampleCapturer")
@interface RemonSampleCapturer : RTCVideoCapturer
- (nonnull instancetype)initWithDelegate:(id <RTCVideoCapturerDelegate> _Nonnull)delegate SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13RemoteMonster17RemonSearchResult")
@interface RemonSearchResult : NSObject
@property (nonatomic, copy) NSString * _Nonnull chId;
@property (nonatomic, copy) NSString * _Nonnull serviceId;
@property (nonatomic, copy) NSString * _Nonnull status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13RemoteMonster15RemonStatReport")
@interface RemonStatReport : NSObject
@property (nonatomic, copy) NSString * _Nonnull localCandidate;
@property (nonatomic, copy) NSString * _Nonnull remoteCandidate;
@property (nonatomic) NSInteger localFrameWidth;
@property (nonatomic) NSInteger localFrameHeight;
@property (nonatomic) NSInteger remoteFrameWidth;
@property (nonatomic) NSInteger remoteFrameHeight;
@property (nonatomic) NSInteger localFrameRate;
@property (nonatomic) NSInteger remoteFrameRate;
@property (nonatomic) NSInteger availableSendBandwidth;
@property (nonatomic) NSInteger availableReceiveBandwidth;
@property (nonatomic) float rtt;
@property (nonatomic) float localAudioFractionLost;
@property (nonatomic) float localVideoFractionLost;
@property (nonatomic) float remoteAudioFractionLost;
@property (nonatomic) float remoteVideoFractionLost;
@property (nonatomic) float bytesReceived;
@property (nonatomic, copy) NSString * _Nonnull fullStatReport;
- (RatingValue * _Nonnull)getHealthRating SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getFpsRating SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getRemoteAudioFractionLost SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getLocalAudioFractionLost SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getRemoteVideoFractionLost SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getLoaclVideoFractionLost SWIFT_WARN_UNUSED_RESULT;
- (RatingValue * _Nonnull)getRttRating SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Remon의 상태
/// INIT: Remon을 생성하여 서버와 연결되기까지 과정을 의미
typedef SWIFT_ENUM(NSInteger, RemonState, open) {
///
  RemonStateREADY = 0,
/// 객체를 생성하여 서버와 웹소켓으로 연결되는 과정의 상태를 의미
  RemonStateINIT = 1,
/// 채널 생성및 접속이 완료된 상황. 통화인 경우 상대편 기다리는 상태
  RemonStateCREATE = 2,
/// 상대편 채널에 접속중일 때의 상태
  RemonStateCONNECT = 3,
/// 방송 생성 후 상태
  RemonStateCOMPLETE = 4,
/// 통신 연결 후 빠져나갔을 때의 상태
  RemonStateCLOSE = 5,
};


SWIFT_CLASS("_TtC13RemoteMonster10StatResult")
@interface StatResult : NSObject
@property (nonatomic) NSInteger availableReceiveBandwidth;
@property (nonatomic) NSInteger availableSendBandwidth;
@property (nonatomic) NSInteger fractionRating;
@property (nonatomic) NSInteger localAudioFractionLost;
@property (nonatomic) NSInteger localAudioFractionRating;
@property (nonatomic, copy) NSString * _Nonnull localCandidate;
@property (nonatomic) NSInteger localFrameHeight;
@property (nonatomic) NSInteger localFrameRate;
@property (nonatomic) NSInteger localFrameWidth;
@property (nonatomic) NSInteger localVideoFractionLost;
@property (nonatomic) NSInteger localVideoFractionRating;
@property (nonatomic) NSInteger remoteAudioFractionLost;
@property (nonatomic) NSInteger remoteAudioFractionRating;
@property (nonatomic, copy) NSString * _Nonnull remoteCandidate;
@property (nonatomic) NSInteger remoteFrameHeight;
@property (nonatomic) NSInteger remoteFrameRate;
@property (nonatomic) NSInteger remoteFrameWidth;
@property (nonatomic) NSInteger remoteVideoFractionLost;
@property (nonatomic) NSInteger remoteVideoFractionRating;
@property (nonatomic) NSInteger rtt;
@property (nonatomic) NSInteger rttRating;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WebSocketReadyState : NSInteger;

/// WebSocket objects are bidirectional network streams that communicate over HTTP. RFC 6455.
SWIFT_CLASS("_TtC13RemoteMonster9WebSocket")
@interface WebSocket : NSObject
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)init:(NSString * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Create a WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols OBJC_DESIGNATED_INITIALIZER;
/// Create a WebSocket object with a deferred connection; the connection is not opened until the .open() method is called.
- (nonnull instancetype)init;
/// The URL as resolved by the constructor. This is always an absolute URL. Read only.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// A string indicating the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object.
@property (nonatomic, readonly, copy) NSString * _Nonnull subProtocol;
/// Allow for Self-Signed SSL Certificates. Default is false.
@property (nonatomic) BOOL allowSelfSignedSSL;
/// The queue for firing off events. default is main_queue
@property (nonatomic, strong) dispatch_queue_t _Nullable eventQueue;
/// The current state of the connection; this is one of the WebSocketReadyState constants. Read only.
@property (nonatomic, readonly) enum WebSocketReadyState readyState;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)open:(NSString * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)openWithNsurl:(NSURL * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (void)open:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (void)open:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Opens a deferred or closed WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (void)openWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a closed WebSocket connection from an NSURLRequest; Uses the same request and protocols as previously closed WebSocket
- (void)open;
/// Closes the WebSocket connection or connection attempt, if any. If the connection is already closed or in the state of closing, this method does nothing.
/// :param: code An integer indicating the status code explaining why the connection is being closed. If this parameter is not specified, a default value of 1000 (indicating a normal closure) is assumed.
/// :param: reason A human-readable string explaining why the connection is closing. This string must be no longer than 123 bytes of UTF-8 text (not characters).
- (void)close:(NSInteger)code reason:(NSString * _Nonnull)reason;
/// Transmits message to the server over the WebSocket connection.
/// :param: message The message to be sent to the server.
- (void)send:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
/// :param: optional message The data to be sent to the server.
- (void)ping:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
- (void)ping;
@end

@protocol WebSocketDelegate;

@interface WebSocket (SWIFT_EXTENSION(RemoteMonster))
/// The events of the WebSocket using a delegate.
@property (nonatomic, strong) id <WebSocketDelegate> _Nullable delegate;
/// Transmits message to the server over the WebSocket connection.
/// :param: text The message (string) to be sent to the server.
- (void)sendWithText:(NSString * _Nonnull)text;
/// Transmits message to the server over the WebSocket connection.
/// :param: data The message (binary) to be sent to the server.
- (void)sendWithData:(NSData * _Nonnull)data;
@end


/// WebSocketDelegate is an Objective-C alternative to WebSocketEvents and is used to delegate the events for the WebSocket connection.
SWIFT_PROTOCOL("_TtP13RemoteMonster17WebSocketDelegate_")
@protocol WebSocketDelegate
/// A function to be called when the WebSocket connection’s readyState changes to .Open; this indicates that the connection is ready to send and receive data.
- (void)webSocketOpen;
/// A function to be called when the WebSocket connection’s readyState changes to .Closed.
- (void)webSocketClose:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean;
/// A function to be called when an error occurs.
- (void)webSocketError:(NSError * _Nonnull)error;
@optional
/// A function to be called when a message (string) is received from the server.
- (void)webSocketMessageText:(NSString * _Nonnull)text;
/// A function to be called when a message (binary) is received from the server.
- (void)webSocketMessageData:(NSData * _Nonnull)data;
/// A function to be called when a pong is received from the server.
- (void)webSocketPong;
/// A function to be called when the WebSocket process has ended; this event is guarenteed to be called once and can be used as an alternative to the “close” or “error” events.
- (void)webSocketEnd:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean error:(NSError * _Nullable)error;
@end

/// The WebSocketReadyState enum is used by the readyState property to describe the status of the WebSocket connection.
typedef SWIFT_ENUM(NSInteger, WebSocketReadyState, open) {
/// The connection is not yet open.
  WebSocketReadyStateConnecting = 0,
/// The connection is open and ready to communicate.
  WebSocketReadyStateOpen = 1,
/// The connection is in the process of closing.
  WebSocketReadyStateClosing = 2,
/// The connection is closed or couldn’t be opened.
  WebSocketReadyStateClosed = 3,
};


SWIFT_CLASS("_TtC13RemoteMonster9aecunpack")
@interface aecunpack : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, objc_RemonBandwidth, open) {
  objc_RemonBandwidthHIGH = 0,
  objc_RemonBandwidthMEDIUM = 1,
  objc_RemonBandwidthLOW = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
